"""
The standard cautionary tale of using LLMs such as chat-gpt. After just a couple of prompts I was
given this output, overall I'm pretty happy with the results. It was functional, however there
were a couple of issues noted below in comments. These issues seem to be mainly due to chat-gpt
having out-dated information, though there is an inconsistency either way.


The Prompts I used:

1: "Can you give me a list of every Pokemon with the pokedex number. But in addition to the pokedex 
number, the pocket the card should go into in 9 pocket binder sheets, assuming each new generation 
starts on a new page."
(It had a limit to the output, so I tried asking it to continue, it just repeated the start again, 
so I asked it for the code.)

2: "Can you give me the Python code to do this, including downloading the list of Pokemon."


Issues:

[1] The data seems out of date, as there should be 1025 results now, not 1010. Maybe chat-gpt 
didn't have info that new?

[2] For some reason the count for gen 9 is 100, but it should be 120. The value of 100 adds to a 
total accross all generations of 1005. Inconsistent with the value of the previous point ([1]).

[3] Used 3 digits when printing zero padded Pokemon number, should be 4 because there are over 1000
Pokemon. Arguable whether this is actually an issue but I find it odd when zero leading the first 
100, but none after. For instance on current Pokemon cards (that I've seen) they do number them all
with 4 digits.
"""

# Everything below is generated by chat-gpt, except where otherwise noted in comments.

import requests

# Function to fetch Pokemon data from an open API (e.g., PokeAPI)
def fetch_pokemon_list(limit=1010): # [1]
    url = f'https://pokeapi.co/api/v2/pokemon?limit={limit}'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return [pokemon['name'].capitalize() for pokemon in data['results']]
    else:
        raise Exception('Failed to fetch data from PokeAPI')

# Function to create the binder location list
def generate_binder_guide(pokemon_list):
    binder_guide = []
    generation_limits = [151, 100, 135, 107, 156, 72, 88, 96, 100] # [2]  # Number of Pokemon per generation
    page_offset = 0

    pokemon_index = 0
    for gen, gen_limit in enumerate(generation_limits, start=0):  # Start at 0 for zero-based generation count
        generation_number = gen + 1  # Adjust to use 1-based display for generation
        page_number = 1
        for i in range(gen_limit):
            pocket_number = (i % 9) + 1
            if pocket_number == 1 and i != 0:
                page_number += 1
            pokemon_name = pokemon_list[pokemon_index]
            binder_guide.append(f'Gen {generation_number} - {pokemon_index + 1:03} - {pokemon_name} - Page {page_number + page_offset}/{pocket_number}') # [3]
            pokemon_index += 1
        page_offset += page_number

    return binder_guide

# Main script
try:
    pokemon_list = fetch_pokemon_list()
    binder_guide = generate_binder_guide(pokemon_list)
    for entry in binder_guide:
        print(entry)
except Exception as e:
    print(str(e))